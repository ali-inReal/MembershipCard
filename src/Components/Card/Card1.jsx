/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 CARD.glb
*/

import { extend } from '@react-three/fiber'
import * as THREE from 'three'
import { TextureLoader } from 'three/src/loaders/TextureLoader'
import React, { useRef } from 'react'
import { useTexture } from '@react-three/drei'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import multi from "./../../assets/p.jpg"
import { useState,useEffect } from 'react'
import { useLoader } from '@react-three/fiber'  
import { MeshStandardMaterial } from 'three'
import {TextGeometry} from "three/examples/jsm/geometries/TextGeometry"
import { FontLoader } from 'three/examples/jsm/loaders/FontLoader'
import fo from "./../../assets/Adobe Garamond Pro Bold_Regular.typeface.json"
import fon from "three/examples/fonts/gentilis_regular.typeface.json"
extend({TextGeometry})
export function Card1(props) {
    const group = useRef()
    // useFrame((state, delta) => (group.current.rotation.y += delta/3))
    const { nodes, materials, animations } = useGLTF('/CARD.glb')
    const { actions } = useAnimations(animations, group)
    const [video] = useState(() => Object.assign(document.createElement('video'), { src: '/text.mp4', crossOrigin: 'Anonymous', loop: true, muted: true }))
    useEffect(() => void video.play(), [video])
    const colorMap = useLoader(TextureLoader, multi)
    const text = useTexture("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRN4AaarcsBBIx79EDp059JxdmsSBQpw1j-Z7DZLYg&s")
    console.log(nodes.forwardText1)
    const font = new FontLoader().parse(fon)
  return (
    <group scale={1.5} ref={group} {...props} dispose={null}>
      <group name="final_for_render_">
        <group name="base_parent_" position={[0, -0.09, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.73}>
          <mesh name="backHeart" geometry={nodes.backHeart.geometry} material={materials.QR} position={[-0.78, -0.04, 1.61]} rotation={[0, 0, -Math.PI]} scale={[0.65, 2.95, 0.65]} />
          <mesh name="backLogo" geometry={nodes.backLogo.geometry} material={materials['Material.007']} position={[-0.22, -0.06, 0]} rotation={[Math.PI, 0, 0]} scale={[-2.27, -3.2, -2.27]} />
          <mesh name="backText1" geometry={nodes.backText1.geometry} material={materials.text} position={[0.39, -0.05, 1.43]} rotation={[-Math.PI, 0, 0]} scale={[-0.13, -1.95, -0.13]} />
          <mesh name="backText2" geometry={nodes.backText2.geometry} material={materials.text} position={[0.36, -0.05, 1.56]} rotation={[-Math.PI, 0, 0]} scale={[-0.1, -1.56, -0.1]} />
          <mesh name="BackText3" geometry={nodes.BackText3.geometry} material={materials.text} position={[0.7, -0.05, 1.75]} rotation={[-Math.PI, 0, 0]} scale={[-0.13, -1.91, -0.13]} />
          <mesh name="backText4" geometry={nodes.backText4.geometry} material={materials.text} position={[0.49, -0.05, 1.85]} rotation={[-Math.PI, 0, 0]} scale={[-0.1, -1.08, -0.1]} />
          <mesh name="forwardQR" geometry={nodes.forwardQR.geometry} material={materials.text} position={[0.8, 0.04, 1.66]} scale={[0.57, 2.34, 0.57]} />
          <mesh name="forwardText1" rotation={[4.6,0,0]}  material={materials.text} position={[-1.03, 0.04, 1.39]}  >
          {/* <textGeometry  args={['test', {font, size:0.1, height: 0.03,bewelThickness:0.003,bewelSize:0.015}]}/> */}
          </mesh>
          <mesh name="forwardText2" rotation={[4.6,0,0]}  material={materials.text} position={[-1.03, 0.04, 1.51]}  >
            <textGeometry  args={['Muhammad Ali', {font, size:0.15, height: 0.1,bewelThickness:0.015,bewelSize:0.003}]}/>
          </mesh>
          <mesh name="forwardText3" geometry={nodes.forwardText3.geometry} material={materials.text} position={[-0.41, 0.04, 1.65]} scale={[0.1, 1.55, 0.1]} />
          <mesh name="forwardText4" geometry={nodes.forwardText4.geometry} material={materials.text} position={[-0.36, 0.04, 1.77]} scale={[0.1, 1.55, 0.1]} />
          <mesh name="forwardText5" geometry={nodes.forwardText5.geometry} material={materials.text} position={[-0.74, 0.05, 1.87]} scale={[0.1, 1.57, 0.1]} />
          <mesh name="profile" rotation={[0,89.55,0]}  geometry={nodes.profile.geometry}  position={[0.02, 0.05, -0.15]} scale={[0.77, 0.05, 0.77]} >
          <meshStandardMaterial reflectivity={0}  map={text} toneMapped={false} transparent={false} opacity={1} />
          </mesh>
          <mesh name="RoundBorder" geometry={nodes.RoundBorder.geometry} material={materials['Material.007']} position={[0.02, 0.08 , -0.15]} scale={[0.71, 0.05, 0.71]} />
        </group>
        <mesh name="bottomHalf" geometry={nodes.bottomHalf.geometry} material={materials['Material.007']} position={[0, -1.3, 0]} rotation={[Math.PI / 2, 0, 0]} scale={[0.49, 0.48, 0.22]} />
        <mesh name="cardBody" geometry={nodes.cardBody.geometry}  position={[0, -0.14, 0]} rotation={[Math.PI / 2, 0, 0]} scale={[0.84, 0.48, 1.12]} >
        <meshBasicMaterial toneMapped={false}>
            <videoTexture attach="map" args={[video]} encoding={THREE.sRGBEncoding} />
          </meshBasicMaterial>
        </mesh>
        <mesh name="Circle" geometry={nodes.Circle.geometry} material={materials['Material.006']} position={[0.02, 0.89, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.25} />
      </group>
    </group>
  )
}

useGLTF.preload('/CARD.glb')
